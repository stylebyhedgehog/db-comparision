version: '3.8'

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ecommerce
    ports:
      - "5432:5432"
    volumes:
      - ./docker/init_db/init_postgresql.sql:/docker-entrypoint-initdb.d/init_postgresql.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d ecommerce"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_jsonb:
    image: postgres:13
    environment:
      POSTGRES_USER: user_jsonb
      POSTGRES_PASSWORD: password_jsonb
      POSTGRES_DB: ecommerce_jsonb
    ports:
      - "5433:5433"
    volumes:
      - ./docker/init_db/init_postgresql_b.sql:/docker-entrypoint-initdb.d/init_postgresql_b.sql
    command: postgres -c port=5433
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_jsonb -d ecommerce_jsonb -p 5433"]
      interval: 10s
      timeout: 5s
      retries: 5


  neo4j:
    image: neo4j:4.4
    environment:
      NEO4J_AUTH: neo4j/test
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - ./docker/init_db/init_neo4j.cypher:/var/lib/neo4j/import/init_neo4j.cypher
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p test 'RETURN 1'"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:6
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    command: ["mongod", "--logpath", "/dev/null", "--quiet"]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 25s
      retries: 5

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  cassandra:
    image: cassandra:4.0
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_CLUSTER_NAME: "Test Cluster"
      CASSANDRA_DC: "datacenter1"
      CASSANDRA_RACK: "rack1"
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
    volumes:
      - cassandra_data:/var/lib/cassandra
    healthcheck:
      test: [ "CMD-SHELL", "cqlsh -e 'SELECT release_version FROM system.local;'" ]
      start_period: 25s
      interval: 10s
      timeout: 25s
      retries: 5

  app:
    build: .
    depends_on:
      postgres:
        condition: service_healthy
      postgres_jsonb:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://user:password@postgres:5432/ecommerce
      DATABASE_JSONB_URL: postgres://user_jsonb:password_jsonb@postgres_jsonb:5433/ecommerce_jsonb
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: test
      MONGO_URL: mongodb://root:example@mongodb:27017/
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      CASSANDRA_CONTACT_POINTS: cassandra
      CASSANDRA_PORT: 9042
      CASSANDRA_KEYSPACE: test_keyspace
      PYTHONPATH: /app
    command: pytest tests --log-cli-level=INFO

volumes:
  mongodb_data:
  cassandra_data:
